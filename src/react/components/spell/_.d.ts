import { ChangeEvent, Component } from "react";
import '@/utils/extensions';
import { ISpell } from "./model/spell_model";
import { Attribute, DurationUnit, RangeUnit, School, SpellClass, TimeUnit } from "./model/spell_types";
import './spell_editor.scss';
declare type State = {
    editing: boolean;
    level: number;
    name_english: string;
    name_german: string;
    classes: SpellClass[];
    school: School;
    ritual: boolean;
    time_consumption_value: number;
    time_consumption_format: TimeUnit;
    range_format: RangeUnit;
    range_value: number;
    target: string;
    components_verbal: boolean;
    components_somatic: boolean;
    components_material: string;
    duration_concentration: boolean;
    duration_format: DurationUnit;
    duration_value: number;
    duration_additional: string;
    description: string;
    higher_levels: string;
    attributes: Attribute;
};
declare type Props = {
    spell: ISpell | null;
};
export declare class SpellEditor extends Component<Props, State> {
    constructor(props: Props);
    readonly url: string;
    build_find_query(name: string): string;
    change_name(name: 'english' | 'german', e: ChangeEvent<HTMLInputElement>): void;
    change_level(e: ChangeEvent<HTMLInputElement>): void;
    change_classes(cls: SpellClass, e: ChangeEvent<HTMLInputElement>): void;
    change_higher_level(e: ChangeEvent<HTMLTextAreaElement>): void;
    change_description(e: ChangeEvent<HTMLTextAreaElement>): void;
    change_attributes(e: ChangeEvent<HTMLSelectElement>): void;
    change_additional(e: ChangeEvent<HTMLInputElement>): void;
    change_concentration(e: ChangeEvent<HTMLInputElement>): void;
    change_duration_value(e: ChangeEvent<HTMLInputElement>): void;
    change_duration_type(e: ChangeEvent<HTMLSelectElement>): void;
    change_component(type: 'verbal' | 'somatic' | 'material', e: ChangeEvent<HTMLInputElement>): void;
    change_target(e: ChangeEvent<HTMLInputElement>): void;
    change_range_type(e: ChangeEvent<HTMLSelectElement>): void;
    change_range_value(e: ChangeEvent<HTMLInputElement>): void;
    change_time_type(e: ChangeEvent<HTMLSelectElement>): void;
    change_time_value(e: ChangeEvent<HTMLInputElement>): void;
    change_ritual(e: ChangeEvent<HTMLInputElement>): void;
    change_school(e: ChangeEvent<HTMLSelectElement>): void;
    get_as_spell(): ISpell;
    submit(): void;
    render(): JSX.Element;
    get_value(type: 'feet' | 'meter'): number;
}
export {};
